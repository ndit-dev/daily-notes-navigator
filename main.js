/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DailyNotesNavigator
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_obsidian2 = require("obsidian");
var DailyNotesNavigator = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      this.addCommand({
        id: "goto-next-daily",
        name: "Go to next daily note",
        callback: () => this.navigateDaily(1)
      });
      this.addCommand({
        id: "goto-previous-daily",
        name: "Go to previous daily note",
        callback: () => this.navigateDaily(-1)
      });
      this.addCommand({
        id: "goto-next-week",
        name: "Go to next week",
        callback: () => this.navigateDaily(7)
      });
      this.addCommand({
        id: "goto-previous-week",
        name: "Go to previous week",
        callback: () => this.navigateDaily(-7)
      });
      this.addCommand({
        id: "goto-next-month",
        name: "Go to next month",
        callback: () => this.navigateToMonth(1)
      });
      this.addCommand({
        id: "goto-previous-month",
        name: "Go to previous month",
        callback: () => this.navigateToMonth(-1)
      });
      this.addCommand({
        id: "goto-month-start",
        name: "Go to start of month",
        callback: () => this.navigateToMonthBoundary("start")
      });
      this.addCommand({
        id: "goto-month-end",
        name: "Go to end of month",
        callback: () => this.navigateToMonthBoundary("end")
      });
    });
  }
  navigateDaily(offset) {
    return __async(this, null, function* () {
      const activeFile = this.app.workspace.getActiveFile();
      if (!activeFile) {
        new import_obsidian.Notice("No active file");
        return;
      }
      const currentDate = this.getDateFromFilename(activeFile.basename);
      if (!currentDate) {
        new import_obsidian.Notice("Current file is not a daily note");
        return;
      }
      const targetDate = (0, import_obsidian2.moment)(currentDate).add(offset, "days");
      const targetDateString = targetDate.format("YYYY-MM-DD");
      yield this.navigateToDate(targetDate);
    });
  }
  navigateToMonth(offset) {
    return __async(this, null, function* () {
      const activeFile = this.app.workspace.getActiveFile();
      if (!activeFile) {
        new import_obsidian.Notice("No active file");
        return;
      }
      const currentDate = this.getDateFromFilename(activeFile.basename);
      if (!currentDate) {
        new import_obsidian.Notice("Current file is not a daily note");
        return;
      }
      const targetDate = (0, import_obsidian2.moment)(currentDate).add(offset, "months");
      yield this.navigateToDate(targetDate);
    });
  }
  navigateToMonthBoundary(boundary) {
    return __async(this, null, function* () {
      const activeFile = this.app.workspace.getActiveFile();
      if (!activeFile) {
        new import_obsidian.Notice("No active file");
        return;
      }
      const currentDate = this.getDateFromFilename(activeFile.basename);
      if (!currentDate) {
        new import_obsidian.Notice("Current file is not a daily note");
        return;
      }
      const targetDate = boundary === "start" ? (0, import_obsidian2.moment)(currentDate).startOf("month") : (0, import_obsidian2.moment)(currentDate).endOf("month");
      yield this.navigateToDate(targetDate);
    });
  }
  navigateToDate(targetDate) {
    return __async(this, null, function* () {
      const targetDateString = targetDate.format("YYYY-MM-DD");
      const activeFile = this.app.workspace.getActiveFile();
      if (!activeFile)
        return;
      const dailyNotesFolder = this.getParentFolderPath(activeFile);
      const targetFilePath = `${dailyNotesFolder}${targetDateString}.md`;
      const targetFile = this.app.vault.getAbstractFileByPath(targetFilePath);
      if (targetFile instanceof import_obsidian.TFile) {
        new import_obsidian.Notice(`Opening note for ${targetDate.format("MMMM Do, YYYY")}`);
        const leaf = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if (leaf) {
          yield leaf.leaf.openFile(targetFile);
        }
      } else {
        new import_obsidian.Notice(`Creating new note for ${targetDate.format("MMMM Do, YYYY")}`);
        const newFile = yield this.app.vault.create(targetFilePath, "");
        const leaf = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if (leaf) {
          yield leaf.leaf.openFile(newFile);
        }
      }
    });
  }
  getDateFromFilename(basename) {
    const match = basename.match(/(\d{4}-\d{2}-\d{2})/);
    if (match) {
      const date = (0, import_obsidian2.moment)(match[1], "YYYY-MM-DD", true);
      if (date.isValid()) {
        return date;
      }
    }
    return null;
  }
  getParentFolderPath(file) {
    const parts = file.path.split("/");
    parts.pop();
    return parts.length > 0 ? parts.join("/") + "/" : "";
  }
};
